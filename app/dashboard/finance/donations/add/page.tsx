'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { useToast } from '@/hooks/use-toast';
import { financeService } from '@/services';
import { DonationCategory, DonationMethod, DonationStatus, Currency } from '@/lib/types';
import { CurrencyDisplay } from '@/components/ui/currency-display';
import {
  ArrowLeft,
  Save,
  Receipt,
  User,
  DollarSign,
  Calendar,
  MapPin,
  CreditCard
} from 'lucide-react';
import Link from 'next/link';

// Zod schema for donation form
const donationFormSchema = z.object({
  donorName: z.string().min(2, 'Donor name must be at least 2 characters'),
  donorEmail: z.string().email('Please enter a valid email address').optional().or(z.literal('')),
  donorPhone: z.string().min(10, 'Phone number must be at least 10 digits').optional().or(z.literal('')),
  amount: z.number().min(1, 'Amount must be greater than 0'),
  currency: z.enum(['GHS', 'USD', 'EUR', 'GBP']),
  category: z.enum([
    'General Offering',
    'Building Fund',
    'Missions',
    'Children Ministry',
    'Youth Ministry',
    'Music Ministry',
    'Media Ministry',
    'Welfare',
    'Special Project',
    'Other'
  ]),
  method: z.enum(['Cash', 'Mobile Money', 'Bank Transfer', 'Check', 'Card', 'Online']),
  status: z.enum(['Pending', 'Confirmed', 'Rejected', 'Refunded']),
  description: z.string().optional().or(z.literal('')),
  branch: z.enum(['Adenta (HQ)', 'Adusa', 'Liberia', 'Somanya', 'Mampong']),
  recordedBy: z.string().min(2, 'Recorder name must be at least 2 characters'),
});

type DonationFormData = z.infer<typeof donationFormSchema>;

export default function AddDonationPage() {
  const [loading, setLoading] = useState(false);
  const router = useRouter();
  const { toast } = useToast();

  const form = useForm<DonationFormData>({
    resolver: zodResolver(donationFormSchema),
    defaultValues: {
      donorName: '',
      donorEmail: '',
      donorPhone: '',
      amount: 0,
      currency: 'GHS',
      category: 'General Offering',
      method: 'Cash',
      status: 'Pending',
      description: '',
      branch: 'Adenta (HQ)',
      recordedBy: '',
    },
  });

  const onSubmit = async (data: DonationFormData) => {
    try {
      setLoading(true);

      const donation = await financeService.createDonation({
        ...data,
        receiptNumber: '', // Will be generated by service
        date: new Date().toISOString().split('T')[0], // Today's date
      });

      toast({
        title: 'Success',
        description: 'Donation recorded successfully',
      });

      // Redirect to donations list
      router.push('/dashboard/finance/donations');

    } catch (error: any) {
      toast({
        title: 'Error',
        description: error.message || 'Failed to record donation',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <Button variant="ghost" size="sm" asChild>
            <Link href="/dashboard/finance/donations">
              <ArrowLeft className="mr-2 h-4 w-4" />
              Back to Donations
            </Link>
          </Button>
          <div>
            <h1 className="text-3xl font-bold tracking-tight">Record Donation</h1>
            <p className="text-muted-foreground">Record a new donation or offering</p>
          </div>
        </div>
      </div>

      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
          {/* Donor Information */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <User className="mr-2 h-5 w-5" />
                Donor Information
              </CardTitle>
              <CardDescription>Basic information about the donor</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="donorName"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Donor Name *</FormLabel>
                      <FormControl>
                        <Input placeholder="Enter donor's full name" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="donorEmail"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Email Address</FormLabel>
                      <FormControl>
                        <Input type="email" placeholder="Enter email address (optional)" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="donorPhone"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Phone Number</FormLabel>
                      <FormControl>
                        <Input placeholder="Enter phone number (optional)" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="recordedBy"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Recorded By *</FormLabel>
                      <FormControl>
                        <Input placeholder="Enter recorder's name" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            </CardContent>
          </Card>

          {/* Donation Details */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <DollarSign className="mr-2 h-5 w-5" />
                Donation Details
              </CardTitle>
              <CardDescription>Amount, category, and payment information</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <FormField
                  control={form.control}
                  name="amount"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Amount *</FormLabel>
                      <FormControl>
                        <Input 
                          type="number" 
                          placeholder="0.00" 
                          {...field}
                          onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="currency"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Currency *</FormLabel>
                      <Select onValueChange={field.onChange} defaultValue={field.value}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select currency" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="GHS">GHS (₵)</SelectItem>
                          <SelectItem value="USD">USD ($)</SelectItem>
                          <SelectItem value="EUR">EUR (€)</SelectItem>
                          <SelectItem value="GBP">GBP (£)</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="status"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Status *</FormLabel>
                      <Select onValueChange={field.onChange} defaultValue={field.value}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select status" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="Pending">Pending</SelectItem>
                          <SelectItem value="Confirmed">Confirmed</SelectItem>
                          <SelectItem value="Rejected">Rejected</SelectItem>
                          <SelectItem value="Refunded">Refunded</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="category"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Category *</FormLabel>
                      <Select onValueChange={field.onChange} defaultValue={field.value}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select category" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="General Offering">General Offering</SelectItem>
                          <SelectItem value="Building Fund">Building Fund</SelectItem>
                          <SelectItem value="Missions">Missions</SelectItem>
                          <SelectItem value="Children Ministry">Children Ministry</SelectItem>
                          <SelectItem value="Youth Ministry">Youth Ministry</SelectItem>
                          <SelectItem value="Music Ministry">Music Ministry</SelectItem>
                          <SelectItem value="Media Ministry">Media Ministry</SelectItem>
                          <SelectItem value="Welfare">Welfare</SelectItem>
                          <SelectItem value="Special Project">Special Project</SelectItem>
                          <SelectItem value="Other">Other</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="method"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Payment Method *</FormLabel>
                      <Select onValueChange={field.onChange} defaultValue={field.value}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select payment method" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="Cash">Cash</SelectItem>
                          <SelectItem value="Mobile Money">Mobile Money</SelectItem>
                          <SelectItem value="Bank Transfer">Bank Transfer</SelectItem>
                          <SelectItem value="Check">Check</SelectItem>
                          <SelectItem value="Card">Card</SelectItem>
                          <SelectItem value="Online">Online</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <FormField
                control={form.control}
                name="description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Description</FormLabel>
                    <FormControl>
                      <Textarea 
                        placeholder="Enter additional details about the donation (optional)" 
                        {...field} 
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </CardContent>
          </Card>

          {/* Location Information */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <MapPin className="mr-2 h-5 w-5" />
                Location Information
              </CardTitle>
              <CardDescription>Branch and location details</CardDescription>
            </CardHeader>
            <CardContent>
              <FormField
                control={form.control}
                name="branch"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Branch *</FormLabel>
                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select branch" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="Adenta (HQ)">Adenta (HQ)</SelectItem>
                        <SelectItem value="Adusa">Adusa</SelectItem>
                        <SelectItem value="Liberia">Liberia</SelectItem>
                        <SelectItem value="Somanya">Somanya</SelectItem>
                        <SelectItem value="Mampong">Mampong</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </CardContent>
          </Card>

          {/* Form Actions */}
          <div className="flex items-center justify-end space-x-4">
            <Button variant="outline" type="button" onClick={() => router.back()}>
              Cancel
            </Button>
            <Button type="submit" disabled={loading}>
              {loading ? (
                <>
                  <div className="mr-2 h-4 w-4 animate-spin rounded-full border-2 border-background border-t-transparent" />
                  Recording...
                </>
              ) : (
                <>
                  <Save className="mr-2 h-4 w-4" />
                  Record Donation
                </>
              )}
            </Button>
          </div>
        </form>
      </Form>
    </div>
  );
} 